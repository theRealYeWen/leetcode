package org.problems.hash;

public class Problem08_Leetcode283 {
  /*给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。
  请注意 ，必须在不复制数组的情况下原地对数组进行操作。
  示例 1:
  输入: nums = [0,1,0,3,12]
  输出: [1,3,12,0,0]

  示例 2:
  输入: nums = [0]
  输出: [0]
  */

  // 题目要求在不使用额外数组的情况下，将所有 0 移动到数组末尾，同时保持非 0 元素的相对顺序。
  // 破题点在于如何在一次遍历中，把所有非 0 元素按原顺序“搬运”到数组前端，然后将剩下的位置填充 0。
  // 这种类型的题可以使用经典的双指针法,i用来遍历数组，j用来指向下一个非0元素应该存放的位置
  public void moveZeroes(int[] nums) {
    int j = 0;

    for (int i = 0; i < nums.length; i++) {
      // 如果数组元素不为0，则将其放入j所指向的位置
      if (nums[i] != 0) {
        nums[j] = nums[i];
        // 如果i != j, 则说明i之前有0元素，i位置的元素已经挪到了前面，当前位置置0
        if (i != j) {
          nums[i] = 0;
        }
        j++;
      }
    }
  }
}
